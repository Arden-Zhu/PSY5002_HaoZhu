[
  {
    "objectID": "posts/paper/index.html",
    "href": "posts/paper/index.html",
    "title": "Paper",
    "section": "",
    "text": "(Title)"
  },
  {
    "objectID": "posts/paper/index.html#data-preparation",
    "href": "posts/paper/index.html#data-preparation",
    "title": "Paper",
    "section": "Data Preparation",
    "text": "Data Preparation\nLoad data and packages\n\nif(!require('tidyverse')) {\n  # install.packages('tidyverse')\n  library(tidyverse)\n}\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nif(!require('tidyr')) {\n  #install.packages('tidyr'); \n  library(tidyr)\n}\nif(!require('ggplot2')) {\n  #install.packages('ggplot2'); \n  library(ggplot2)\n}\nif(!require('gridExtra')) {\n  #install.packages('gridExtra'); \n  library(gridExtra)\n}\n\nLoading required package: gridExtra\n\nAttaching package: 'gridExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nlibrary(corrplot)\n\ncorrplot 0.94 loaded\n\n\nImport Data\n\ndf_game &lt;- read_csv('../../data/exp4-raw.csv', show_col_types=FALSE)\ndf_quest &lt;- read_csv('../../data/exp4-raw-quest.csv', show_col_types=FALSE)\ndf_attention &lt;- read_csv('../../data/exp4-attention.csv', show_col_types=FALSE)\n\nWe used many filters to exclude bad data - Here is the data from the platform itself. Either people who did not complete the whole thing, or they were too fast for their data to be meaningful, or they skipped all the ratings/probes, all kinds of reasons.\n\nbads &lt;- c('594fa525f61b8e00016af178', '5a90460d1eda41000135f918',\n       '5de301515253b03390043d12', '5e87ade2da382941f3f1a621',\n       '5ed377271691ea000c548cb0', '5f3e8506cb479c0a96cf4aac',\n       '5f8f95862a4ed820d9b071ac', '60b671ce563975c4907b9c04')\ndf_game = df_game %&gt;% filter(!subjectID %in% bads)\n\nWe also have participants complete a survey called DAAS in which they answer a couple of questions and then we extract their depression, anxiety and stress scores. As you can see, we have these dimensions mapped to questions and in the following code we just add up all the scores in each dimension.\n\n# Define the question categories\ndepression &lt;- c(3, 5, 10, 13, 16, 17, 21, 24, 26, 31, 34, 37, 38)\nanxiety &lt;- c(2, 4, 7, 9, 15, 19, 20, 23, 25, 28, 30, 36, 40)\nstress &lt;- c(1, 6, 8, 11, 12, 14, 18, 22, 27, 29, 32, 33, 35, 39)\n\n# Create column names for each category\ndepression_cols &lt;- paste0('DASS_', depression)\nanxiety_cols &lt;- paste0('DASS_', anxiety)\nstress_cols &lt;- paste0('DASS_', stress)\n\n# Sum the columns for each category and add to df_quest\ndf_quest &lt;- df_quest %&gt;%\n  mutate(\n    depression = rowSums(select(., all_of(depression_cols)), na.rm = TRUE),\n    anxiety = rowSums(select(., all_of(anxiety_cols)), na.rm = TRUE),\n    stress = rowSums(select(., all_of(stress_cols)), na.rm = TRUE)\n  )\n\n# Drop columns that start with 'DASS'\ndf_quest &lt;- df_quest %&gt;%\n  select(-starts_with('DASS'))\n\n\n# focus on probe data\ndf_prp_raw &lt;- df_game %&gt;% filter(outcome == 'probe')\n\n# check invalid ratings\ndf_prp_raw %&gt;%\n  filter(probeAns&lt;0 | probeAns&gt;1) %&gt;%\n  select(subjectID) %&gt;%\n  distinct()\n\n# A tibble: 0 × 1\n# ℹ 1 variable: subjectID &lt;chr&gt;\n\n# we can use this to filter out those who have lots of missing ratings..\nmissing &lt;- df_prp_raw %&gt;% \n  group_by(subjectID) %&gt;%\n  summarize(missing = mean(is.na(probeAns))) %&gt;%\n  arrange(desc(missing))\n\nhead(missing)\n\n# A tibble: 6 × 2\n  subjectID                missing\n  &lt;chr&gt;                      &lt;dbl&gt;\n1 5c8d12309d2bff0019b4054a  0.977 \n2 5c2fcd716ea6880001dc8e3d  0.932 \n3 5ce031fc7f65ee001a985a6b  0.932 \n4 5f3ec6221b5af3158bc86acd  0.5   \n5 5fca97a4b105427256733533  0.159 \n6 5915e5c6405db80001f30ff1  0.0682\n\n\n\n# here we also have issues with invalid ratings and we want to know how many bad data out there\ninvalidRatings &lt;- missing %&gt;% filter(missing &gt;= 0.5) %&gt;% pull(subjectID)\ndf_prp_raw %&gt;% \n  filter(subjectID %in% invalidRatings) %&gt;% \n  group_by(group) %&gt;%\n  summarize(n = n_distinct(subjectID))\n\n# A tibble: 2 × 2\n  group            n\n  &lt;chr&gt;        &lt;int&gt;\n1 control          3\n2 experimental     1\n\n\n\n# filter them out...\ndf_game &lt;- df_game %&gt;% filter(!subjectID %in% invalidRatings)\ndf_prp_raw &lt;- df_game %&gt;% filter(outcome == 'probe')\n\nn_distinct(df_prp_raw$subjectID)\n\n[1] 393\n\n\nHow many participants in each group?\n\ndf_prp_raw %&gt;%\n  group_by(group) %&gt;%\n  summarize(n = n_distinct(subjectID))\n\n# A tibble: 2 × 2\n  group            n\n  &lt;chr&gt;        &lt;int&gt;\n1 control        203\n2 experimental   190"
  },
  {
    "objectID": "posts/paper/index.html#start-of-the-analysis",
    "href": "posts/paper/index.html#start-of-the-analysis",
    "title": "Paper",
    "section": "Start of the analysis",
    "text": "Start of the analysis\n\n#df_trn_raw &lt;- df_game %&gt;% filter(outcome != 'probe')\ndf_prp_raw &lt;- df_game %&gt;% filter(outcome == 'probe')\n\nWe want to use an average of pre reversal and post reversal. We select 6, 7,8 for pre-reversal baseline and 10,11,12 for post reversal. Note that we also have 6 but we skip it because participant see ratings for first time and they are figuring it out.\n\ndf_prp_focus &lt;- df_prp_raw %&gt;%\n  filter(rep %in% c(6, 7, 8, 10, 11, 12)) %&gt;%\n  mutate(rep = recode(rep, `6` = 'before', `7` = 'before', `8` = 'before', `10` = 'after', `11` = 'after', `12` = 'after')) \n\ndf_prp &lt;- df_prp_focus %&gt;%\n  group_by(subjectID, cue, rep) %&gt;%\n  summarize(probeAns = mean(probeAns, na.rm = TRUE),\n            distance = mean(distance, na.rm = TRUE), .groups = 'drop')\n\nhead(df_prp)\n\n# A tibble: 6 × 5\n  subjectID                cue   rep    probeAns distance\n  &lt;chr&gt;                    &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 55acde7cfdf99b28fb8d7e44 A     after  1            84.3\n2 55acde7cfdf99b28fb8d7e44 A     before 0.998       119. \n3 55acde7cfdf99b28fb8d7e44 AW    before 0.0882      581  \n4 55acde7cfdf99b28fb8d7e44 AX    before 0.411       306  \n5 55acde7cfdf99b28fb8d7e44 B     after  0.000952    571  \n6 55acde7cfdf99b28fb8d7e44 B     before 0           589."
  },
  {
    "objectID": "posts/paper/index.html#stimulus",
    "href": "posts/paper/index.html#stimulus",
    "title": "Paper",
    "section": "Stimulus",
    "text": "Stimulus\n\n# shapes and sounds\n# symbol should be unique for each subject and cue\ndf_prp_focus %&gt;%\n  filter( cue %in% c(\"X\", \"Y\")) %&gt;%\n  group_by(subjectID, cue) %&gt;%\n  summarise( ns = n_distinct(shape), nd = n_distinct(sound), .groups = \"drop\") %&gt;%\n  filter( ns &gt; 1 | nd &gt; 1) \n\n# A tibble: 0 × 4\n# ℹ 4 variables: subjectID &lt;chr&gt;, cue &lt;chr&gt;, ns &lt;int&gt;, nd &lt;int&gt;\n\n\n\ndf_stimuls &lt;- df_prp_focus %&gt;%\n  filter( cue %in% c(\"X\", \"Y\")) %&gt;%\n  group_by(subjectID, cue) %&gt;%\n  summarise( shape = first(shape), sound = first(sound), .groups = \"drop\") %&gt;%\n  mutate( stimulus_type = case_when(shape == 'empty' ~ 'sound', .default = 'shape'),\n          stimulus = case_when(stimulus_type == 'sound' ~ sound, .default = shape)) %&gt;%\n  pivot_wider(names_from = cue, values_from = c(stimulus_type, stimulus), id_cols = subjectID, names_prefix = '') %&gt;%\n  mutate( stimulus_type_X_Y = paste(stimulus_type_X, stimulus_type_Y, sep = \"_\"),\n          stimulus_X_Y = paste(stimulus_X, stimulus_Y, sep = \"_\"))"
  },
  {
    "objectID": "posts/paper/index.html#transform",
    "href": "posts/paper/index.html#transform",
    "title": "Paper",
    "section": "Transform",
    "text": "Transform\n\n# some magic to pivot from long to wide (easier for analysis)\ndf_prp_ratings_wide &lt;- df_prp %&gt;%\n  pivot_wider(names_from = cue, values_from = probeAns, id_cols = c(subjectID, rep))\n\ndf_prp_distance_wide &lt;- df_prp %&gt;%\n  pivot_wider(names_from = cue, values_from = distance, id_cols = c(subjectID, rep))\n\ndf_prp_ratings_wide &lt;- df_prp_ratings_wide %&gt;%\n  pivot_wider(\n    names_from = rep,        \n    values_from = -c(subjectID, rep), \n    names_sep = \"_\"           \n  ) %&gt;%\n  select(-c('AW_after', 'AX_after', 'BY_after', 'BZ_after', 'W_after', 'Z_after'))\n\ndf_prp_distance_wide &lt;- df_prp_distance_wide %&gt;%\n  pivot_wider(\n    names_from = rep,\n    values_from = -c(subjectID, rep),\n    names_sep = \"_\"      \n  ) %&gt;%\n  select(-c('AW_after', 'AX_after', 'BY_after', 'BZ_after', 'W_after', 'Z_after'))\n\n\n# merge the two dataframes\ndf_prp_both &lt;- df_prp_ratings_wide %&gt;%\n  left_join(df_prp_distance_wide, by = \"subjectID\", suffix = c('_rating', '_dist'))\n\nWe merge because we can get all information now including group and scores…\n\ndf_prp_both &lt;- df_prp_both %&gt;%\n  left_join(df_quest, by = \"subjectID\") %&gt;%\n  #left_join(df_attention, by = \"subjectID\") %&gt;%\n  left_join(df_game %&gt;% filter(outcome == 'probe') %&gt;%\n              select(subjectID, group) %&gt;%\n              distinct(), by = \"subjectID\") %&gt;%\n  left_join(df_stimuls %&gt;% \n              select(subjectID, stimulus_type_X_Y, stimulus_X_Y), by = \"subjectID\")\n\nFilter out the participants who did not rating the stimuli in a meaningful way\n\ndf_prp_both &lt;- df_prp_both %&gt;% filter(A_before_rating &gt; B_before_rating, \n                                      A_before_rating &gt; AW_before_rating,\n                                      AW_before_rating &lt; BZ_before_rating, \n                                      B_before_rating &lt; BZ_before_rating,\n                                      )\n\ndf_prp_both &lt;- df_prp_both %&gt;% filter(W_before_rating &lt; Z_before_rating)\n\n\ndf_prp_both %&gt;%\n  group_by(group) %&gt;%\n  summarize(n = n_distinct(subjectID))\n\n# A tibble: 2 × 2\n  group            n\n  &lt;chr&gt;        &lt;int&gt;\n1 control        172\n2 experimental   143"
  },
  {
    "objectID": "posts/paper/index.html#normalized-index",
    "href": "posts/paper/index.html#normalized-index",
    "title": "Paper",
    "section": "Normalized Index",
    "text": "Normalized Index\n\nICI_Norm &lt;- function(Y, X) (Y - X) / sqrt(Y^2 + X^2)\n\ndf_prp_both &lt;- df_prp_both %&gt;%\n  mutate(ICI_YX_rating_pre_norm = ICI_Norm(Y_before_rating, X_before_rating),\n         ICI_YX_dist_pre_norm = - ICI_Norm(Y_before_dist, X_before_dist),\n         ICI_YX_rating_post_norm = ICI_Norm(Y_after_rating, X_after_rating),\n         ICI_YX_dist_post_norm = - ICI_Norm(Y_after_dist, X_after_dist),\n         post_pre_Rating_norm = ICI_YX_rating_post_norm - ICI_YX_rating_pre_norm,\n         post_pre_Dist_norm = ICI_YX_dist_post_norm - ICI_YX_dist_pre_norm)\n\ndf_prp_both &lt;- df_prp_both %&gt;%\n  mutate(ICI_WZ_rating_pre_norm = ICI_Norm(W_before_rating, Z_before_rating),\n         ICI_WZ_dist_pre_norm = - ICI_Norm(W_before_dist, Z_before_dist))\n\n\nDistributions\n\nplot_distribution &lt;- function(df, x, title) {\n  p &lt;- ggplot(df, aes(x = !!sym(x))) +\n  geom_histogram(bins=10, fill = \"grey40\", color = \"white\") +\n  labs(title = title, x = \"Scores\", y = \"\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, hjust = 0.5),\n    axis.title.x = element_text(size = 12),\n    axis.title.y = element_text(size = 12)\n  )\n  return(p)\n}\n\np1 &lt;- plot_distribution(df_prp_both, \"ICI_YX_rating_pre_norm\", \"Pre-Rating ICI_YX\")\np2 &lt;- plot_distribution(df_prp_both%&gt;%filter(group == \"control\"), \"ICI_YX_rating_post_norm\", \"Post-Rating for Control\")\np3 &lt;- plot_distribution(df_prp_both%&gt;%filter(group == \"experimental\"), \"ICI_YX_rating_post_norm\", \"Post-Rating for Experiment\")\n\np4 &lt;- plot_distribution(df_prp_both, \"ICI_YX_dist_pre_norm\", \"Pre-distance ICI_YX\")\np5 &lt;- plot_distribution(df_prp_both%&gt;%filter(group == \"control\"), \"ICI_YX_dist_post_norm\", \"Post-distance ICI_YX for Control\")\np6 &lt;- plot_distribution(df_prp_both%&gt;%filter(group == \"experimental\"), \"ICI_YX_dist_post_norm\", \"Post-distance ICI_YX for Experiment\")\n\ngrid.arrange(p1, p2, p3, p4, p5, p6, ncol = 3)\n\n\n\n\n\n\n\n\n\np1 &lt;- plot_distribution(df_prp_both, \"ICI_WZ_rating_pre_norm\", \"Pre-Rating ICI_WZ\")\n\np4 &lt;- plot_distribution(df_prp_both, \"ICI_WZ_dist_pre_norm\", \"Pre-distance ICI_WZ\")\n\ngrid.arrange(p1, p4, ncol = 2)\n\n\n\n\n\n\n\n\n\n# First plot: Scatter plot of ICI_YX_rating_pre_norm vs ICI_WZ_rating_pre_norm\nggplot(df_prp_both, aes(x = ICI_YX_rating_pre_norm, y = ICI_WZ_rating_pre_norm)) +\n  geom_point() +\n  labs(title = \"Scatter plot of ICI_YX vs ICI_WZ Ratings\",\n       x = \"ICI_YX Rating\",\n       y = \"ICI_WZ Rating\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Second plot: Scatter plot of ICI_YX_dist_pre_norm vs ICI_WZ_dist_pre_norm\nggplot(df_prp_both, aes(x = ICI_YX_dist_pre_norm, y = ICI_WZ_dist_pre_norm)) +\n  geom_point() +\n  labs(title = \"Scatter plot of ICI_YX vs ICI_WZ Distances\",\n       x = \"ICI_YX Distance\",\n       y = \"ICI_WZ Distance\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nPlot accumulated probability distribution group by stimulus type\n\nplot_accumulated_density &lt;- function(df, x, color, title) {\n  p &lt;- ggplot(df, aes(x = !!sym(x), color = !!sym(color))) +\n    stat_ecdf(geom = \"step\", size = 1) +  \n    labs(title = title, x = \"Scores\", y = \"Cumulative Probability\") +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(size = 14, hjust = 0.5),\n      axis.title.x = element_text(size = 12),\n      axis.title.y = element_text(size = 12)\n    )\n  return(p)\n}\n\nplot_density &lt;- function(df, x, color, title) {\n  p &lt;- ggplot(df, aes(x = !!sym(x), color = !!sym(color))) +\n    geom_density(aes(y = ..count..), fill = \"grey40\", alpha = 0.5) +\n    #stat_ecdf(geom = \"step\", size = 1) +  \n    labs(title = title, x = \"Scores\", y = \"Cumulative Probability\") +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(size = 14, hjust = 0.5),\n      axis.title.x = element_text(size = 12),\n      axis.title.y = element_text(size = 12)\n    )\n  return(p)\n}\n\n\np1 &lt;- plot_density(df_prp_both, \"ICI_YX_rating_pre_norm\", \"stimulus_type_X_Y\", \"Density\\n of Pre-Rating\")\np2 &lt;- plot_density(df_prp_both, \"ICI_YX_dist_pre_norm\", \"stimulus_type_X_Y\", \"Density \\n of Pre-Distance\")\n\ngrid.arrange(p1, p2, ncol=2)\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\n\n\n\np1 &lt;- plot_accumulated_density(df_prp_both, \"ICI_YX_rating_pre_norm\", \"stimulus_type_X_Y\", \"Cumulative Density\\n of Pre-Rating\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np2 &lt;- plot_accumulated_density(df_prp_both, \"ICI_YX_dist_pre_norm\", \"stimulus_type_X_Y\", \"Cumulative Density \\n of Pre-Distance\")\n\ngrid.arrange(p1, p2, ncol=2)\n\n\n\n\n\n\n\n\n\np1 &lt;- plot_density(df_prp_both, \"ICI_YX_rating_pre_norm\", \"stimulus_X_Y\", \"Density of Pre-Rating\")\n\ngrid.arrange(p1, ncol=1)\n\n\n\n\n\n\n\np1 &lt;- plot_density(df_prp_both, \"ICI_YX_dist_pre_norm\", \"stimulus_X_Y\", \"Density of Pre-Distance\")\n\ngrid.arrange(p1, ncol=1)\n\n\n\n\n\n\n\n\n\np1 &lt;- plot_accumulated_density(df_prp_both, \"ICI_YX_rating_pre_norm\", \"stimulus_X_Y\", \"Cumulative Density of Pre-Rating\")\n\ngrid.arrange(p1, ncol=1)\n\n\n\n\n\n\n\np1 &lt;- plot_accumulated_density(df_prp_both, \"ICI_YX_dist_pre_norm\", \"stimulus_X_Y\", \"Cumulative Density of Pre-Distance\")\n\ngrid.arrange(p1, ncol=1)\n\n\n\n\n\n\n\n\n\nsummary(aov(df_prp_both$ICI_YX_rating_pre_norm ~ df_prp_both$stimulus_type_X_Y))\n\n                               Df Sum Sq Mean Sq F value Pr(&gt;F)\ndf_prp_both$stimulus_type_X_Y   1   0.05 0.04751   0.358   0.55\nResiduals                     313  41.48 0.13254               \n\n\n\n\nNormality test\nTest for normality using Shapiro-Wilk Test for each index. They seems normal.\n\nshapiro.test(df_prp_both$ICI_YX_rating_pre_norm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  df_prp_both$ICI_YX_rating_pre_norm\nW = 0.97394, p-value = 1.777e-05\n\nshapiro.test(df_prp_both$ICI_YX_dist_pre_norm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  df_prp_both$ICI_YX_dist_pre_norm\nW = 0.9726, p-value = 1.056e-05\n\nshapiro.test(df_prp_both$ICI_YX_rating_post_norm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  df_prp_both$ICI_YX_rating_post_norm\nW = 0.93783, p-value = 3.192e-10\n\nshapiro.test(df_prp_both$ICI_YX_dist_post_norm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  df_prp_both$ICI_YX_dist_post_norm\nW = 0.88533, p-value = 1.257e-14\n\n\n\n\nCorrelations\n\ndf_shorted_name &lt;- df_prp_both %&gt;%\n  mutate(rating_pre = ICI_YX_rating_pre_norm,\n         rating_post = ICI_YX_rating_post_norm,\n         distance_pre = ICI_YX_dist_pre_norm,\n         distance_post = ICI_YX_dist_post_norm)\n  \nselected_columns &lt;- df_shorted_name[, c('anxiety', 'stress', 'depression', 'Sex_0', 'age', 'rating_pre', 'rating_post', 'distance_pre', 'distance_post')]\n\ncor_matrix &lt;- cor(selected_columns, use = \"complete.obs\")\ncor_matrix\n\n                  anxiety      stress  depression        Sex_0         age\nanxiety        1.00000000  0.84290961  0.84950350  0.013009678 -0.19038253\nstress         0.84290961  1.00000000  0.85358218  0.077319077 -0.22205455\ndepression     0.84950350  0.85358218  1.00000000  0.083863705 -0.18094134\nSex_0          0.01300968  0.07731908  0.08386371  1.000000000  0.07366257\nage           -0.19038253 -0.22205455 -0.18094134  0.073662574  1.00000000\nrating_pre    -0.07560735 -0.07443259 -0.06005502  0.049078888  0.04878348\nrating_post   -0.03295682 -0.02751596 -0.02375800 -0.004242396 -0.08268928\ndistance_pre  -0.10107376 -0.11389789 -0.09086615  0.072636159  0.04887542\ndistance_post -0.03164209 -0.02601200 -0.02175057 -0.075899821 -0.12185594\n               rating_pre  rating_post distance_pre distance_post\nanxiety       -0.07560735 -0.032956823  -0.10107376   -0.03164209\nstress        -0.07443259 -0.027515956  -0.11389789   -0.02601200\ndepression    -0.06005502 -0.023758000  -0.09086615   -0.02175057\nSex_0          0.04907889 -0.004242396   0.07263616   -0.07589982\nage            0.04878348 -0.082689278   0.04887542   -0.12185594\nrating_pre     1.00000000  0.309718470   0.55006694    0.29041970\nrating_post    0.30971847  1.000000000   0.33540380    0.59092254\ndistance_pre   0.55006694  0.335403797   1.00000000    0.31594470\ndistance_post  0.29041970  0.590922542   0.31594470    1.00000000\n\n\n\n# Plot the heatmap using corrplot\ncorrplot(cor_matrix, method = \"color\", tl.col = \"black\", tl.srt = 45, \n         addCoef.col = \"black\", number.cex = 0.7, col = colorRampPalette(c(\"blue\", \"white\", \"red\"))(200),\n         title = \"Correlation Heatmap\", mar = c(0, 0, 1, 0))\n\n\n\n\n\n\n\n\n\n\nAssign styles\n\n# Calculate the SD for Pre and define participants' styles\nrating_quantile &lt;- quantile(df_prp_both$ICI_YX_rating_pre_norm, c(1/3, 2/3))\ndist_quantile &lt;- quantile(df_prp_both$ICI_YX_dist_pre_norm, c(1/3, 2/3))\n\ndf_prp_both &lt;- df_prp_both %&gt;%\n  mutate(# rating\n         sd_pre_rating = sd(ICI_YX_rating_pre_norm, na.rm = TRUE),\n         mean_pre_rating = mean(ICI_YX_rating_pre_norm, na.rm = TRUE),\n         style_rating = case_when(\n           #ICI_YX_rating_pre_norm &gt; mean_pre_rating + sd_pre_rating ~ \"Competitive\",\n           #ICI_YX_rating_pre_norm &lt; mean_pre_rating - sd_pre_rating ~ \"Facilitative\",\n           ICI_YX_rating_pre_norm &gt; rating_quantile[2] ~ \"Competitive\",\n           ICI_YX_rating_pre_norm &lt; rating_quantile[1] ~ \"Facilitative\",\n           .default = \"No-Difference\"\n         ),\n         # distance\n         sd_pre_distance = sd(ICI_YX_dist_pre_norm, na.rm = TRUE),\n         mean_pre_distance = mean(ICI_YX_dist_pre_norm, na.rm = TRUE),\n         style_distance = case_when(\n           #ICI_YX_dist_pre_norm &gt; mean_pre_distance + sd_pre_distance ~ \"Competitive\",\n           #ICI_YX_dist_pre_norm &lt; mean_pre_distance - sd_pre_distance ~ \"Facilitative\",\n           ICI_YX_dist_pre_norm &gt; dist_quantile[2] ~ \"Competitive\",\n           ICI_YX_dist_pre_norm &lt; dist_quantile[1] ~ \"Facilitative\",\n           .default = \"No-Difference\"\n         ))\n\nHow many participants in each style?\n\ndf_prp_both %&gt;%\n  group_by(style_rating) %&gt;%\n  summarize(n = n_distinct(subjectID))\n\n# A tibble: 3 × 2\n  style_rating      n\n  &lt;chr&gt;         &lt;int&gt;\n1 Competitive     105\n2 Facilitative    105\n3 No-Difference   105\n\n\n\ndf_prp_both %&gt;%\n  group_by(style_distance) %&gt;%\n  summarize(n = n_distinct(subjectID))\n\n# A tibble: 3 × 2\n  style_distance     n\n  &lt;chr&gt;          &lt;int&gt;\n1 Competitive      105\n2 Facilitative     105\n3 No-Difference    105"
  },
  {
    "objectID": "posts/paper/index.html#final-plot",
    "href": "posts/paper/index.html#final-plot",
    "title": "Paper",
    "section": "Final Plot",
    "text": "Final Plot\n\n# a function to plot ICI\nplot_ICI &lt;- function(df, pre, post, style, title) {\n  # Classify based on the `pre` column\n  df_style &lt;- df %&gt;%\n    mutate(style = .data[[style]])\n  \n  # df_style &lt;- df_style %&gt;% filter(style != 'No-Difference')\n  \n  # Reshape the data\n  df_melted &lt;- df_style %&gt;%\n    select(all_of(c(pre, post, 'group', 'style'))) %&gt;%\n    pivot_longer(cols = all_of(c(pre, post)), names_to = \"flip\", values_to = \"value\") %&gt;%\n    mutate(flip = recode(flip, !!sym(pre) := \"Pre\", !!sym(post) := \"Post\"))\n  \n  # Order the levels\n  df_melted$flip &lt;- factor(df_melted$flip, levels = c(\"Pre\", \"Post\"))\n\n  # Summarize the data to calculate mean and 68% confidence interval\n  df_summary &lt;- df_melted %&gt;%\n    group_by(group, style, flip) %&gt;%\n    summarize(\n      mean_value = mean(value, na.rm = TRUE),\n      se = sd(value, na.rm = TRUE) / sqrt(n()), \n      ci_68 = se * qnorm(0.84),   # Approx 68% CI (1 standard error)\n      .groups = \"drop\"\n    )\n  \n  # Plot using ggplot2 with error bars\n  g &lt;- ggplot(df_summary, aes(x = flip, y = mean_value, color = group, group = group)) +\n    geom_point(size = 2) +  # Increase point size\n    geom_line(linewidth = 1) +  # Use linewidth for the main lines\n    geom_errorbar(aes(ymin = mean_value - ci_68, ymax = mean_value + ci_68), width = 0.05, linewidth = .8) +  # Error bars with thinner lines\n    facet_wrap(~style, scales = \"fixed\", nrow = 1) +  # Use \"fixed\" for shared y-axis\n    labs(title = title, y = \"ICI\", x = \"\") +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),  # Adjust title size\n      axis.title = element_text(size = 14),  # Axis title size\n      axis.text = element_text(size = 12),   # Axis text size\n      strip.text = element_text(size = 14),  # Facet title size\n      legend.position = \"right\",\n      legend.text = element_text(size = 12),  # Adjust legend text size\n      panel.grid.major.x = element_blank(),  # Remove major vertical grid lines\n      panel.grid.minor.x = element_blank(),  # Remove minor vertical grid lines\n      panel.grid.major.y = element_line(color = \"lightgrey\", linewidth = 0.1),  # Add major horizontal grid lines\n      panel.grid.minor.y = element_blank(),  # Remove minor horizontal grid lines\n      panel.spacing = unit(1, \"lines\"),  # Tighten space between panels\n      axis.line.x = element_line(color = \"black\"),  # Add x-axis line\n      axis.line.y.left = element_line(color = \"black\")  # Left y-axis\n    ) +\n    scale_color_manual(values = c(\"blue\", \"orange\")) \n\n  # Display the plot\n  print(g)\n}\n\n# Example usage\nplot_ICI(df_prp_both, 'ICI_YX_rating_pre_norm', 'ICI_YX_rating_post_norm', 'style_rating', 'Normalized ICI-YX Ratings')\n\n\n\n\n\n\n\nplot_ICI(df_prp_both, 'ICI_YX_dist_pre_norm', 'ICI_YX_dist_post_norm', 'style_distance', 'Normalized ICI-YX Distances')"
  },
  {
    "objectID": "posts/paper/index.html#convert-data-to-a-long-format",
    "href": "posts/paper/index.html#convert-data-to-a-long-format",
    "title": "Paper",
    "section": "Convert data to a long format",
    "text": "Convert data to a long format\n\ndf_prp_long &lt;- df_prp_both %&gt;%\n  select(subjectID, group, style_rating, style_distance, ICI_YX_rating_pre_norm, ICI_YX_rating_post_norm, ICI_YX_dist_pre_norm, ICI_YX_dist_post_norm) %&gt;%\n  pivot_longer(cols = c(ICI_YX_rating_pre_norm, ICI_YX_rating_post_norm, ICI_YX_dist_pre_norm, ICI_YX_dist_post_norm), names_to = \"Index\", values_to = \"value\") \n# save to CSV\nwrite_csv(df_prp_long, \"./exp4-ICI.csv\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]